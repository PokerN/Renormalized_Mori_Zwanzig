clear all;close all;

N = 48;
M = 3*N;
create_data(N,1);

load u48;
load(sprintf('u%i.mat',N))
load(sprintf('t%i.mat',N))
start_time = t(end);
u0 = u(:,:,:,:,:,end);


% make k array
k_vec = [0:M-1,-M:1:-1];
[kx,ky,kz] = ndgrid(k_vec,k_vec,k_vec);
k = zeros(2*M,2*M,2*M,3);
k(:,:,:,1) = kx;
k(:,:,:,2) = ky;
k(:,:,:,3) = kz;

% load relevant parameters into parameter structure
params.k = k;
params.N = N;
params.M = M;
params.func = @(x) full_RHS(x);
params.coeff = [];
params.a = 2:M;
params.b = 2*M:-1:M+2;
params.a_tilde = N+1:M;
params.a_tilde2 = 2*N+1:M;
params.print_time = 1;

% run the simulation
options = odeset('RelTol',1e-10,'Stats','on','InitialStep',1e-3);
[t_new,u_raw] = ode45(@(t,u) RHS(u,t,params),[start_time,end_time],u0(:),options);

% reshape the output array into an intelligible shape (should make this a
% separate function later)
u_new = zeros([size(u0) length(t_new)]);
for i = 1:length(t_new)
    u_new(:,:,:,:,:,i) = reshape(u_raw(i,:),[N,N,N,3,4]);
end

t2 = t_new;
u2 = u_new;

save(sprintf('t%i_2',N),'t2');
save(sprintf('u%i_2',N),'u2');




load u48
load u48_2

load t48
load t48_2

s = size(u);

u_both = zeros(s(1),s(2),s(3),s(4),s(5),length(t)+length(t2));
u_both(:,:,:,:,:,1:length(t)) = u;
u_both(:,:,:,:,:,length(t)+1:end) = u2;

t_both = [t;t2];

resolve_array(u_both,t_both);

