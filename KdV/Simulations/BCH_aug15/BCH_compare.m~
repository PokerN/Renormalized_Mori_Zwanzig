clear all;close all;

%N_list = 12:4:40;
N_list = [20,22];

simulation_params.epsilon = 0.1;  %coefficient on linear term in KdV
simulation_params.alpha = 1;      %coefficient on nonlinear term in KdV
simulation_params.dt = 1e-3;      %timestep
%simulation_params.endtime = 100;   %end of simulation
simulation_params.endtime = 1;
simulation_params.howoften = 1;   %how often to save state vector
simulation_params.blowup = 1;     %if 1, instabilities cause simulation to end, but not give error
simulation_params.tol = inf;    %tolerance for identifying instabilities
simulation_params.N = 256;          %number of positive modes to simulate
simulation_params.initial_condition = @(x) sin(x);


%full model with no approximations
simulation_params.name = 'full';
    
[t_list,u_list] = KdV_solve(simulation_params);




for i = 1:length(N_list)
    
    N = N_list(i);
    
    simulation_params.name = 'markov';
    [t_markov,u_markov] = KdV_solve(simulation_params);
    
    simulation_params.name = 'complete';
    [t_4,u_4] = KdV_solve(simulation_params);
    
    simulation_params.name = 'complete';
    [t_2,u_2] = KdV_solve(simulation_params);
    
    simulation_params.name = 'BCH';
    [t_BCH,u_BCH] = KdV_solve(simulation_params);
    
    energy = figure(1);
    set(gca,'FontSize',16)
    hold off
    plot(t_list,get_energy(u_list,N),'b')
    hold on
    plot(t_markov,get_energy(u_markov,N),'r')
    plot(t_4,get_energy(u_4,N),'k')
    plot(t_2,get_energy(u_2,N),'g')
    plot(t_BCH,get_energy(u_BCH,N),'y')
    title(sprintf('Mass in first N = %i modes',N))
    xlabel('time')
    ylabel('mass')
    legend('Exact','Markov','Order 4 ROM','location','southwest')
    saveas(energy,sprintf('energy%i',N),'png')

    
    
    
    
    
    
    
    
end